import { useCallback } from "react";import {  useEditorEventCallback,  useEditorState} from "@handlewithcare/react-prosemirror";import { isNodeActive } from "@/shared/lib/utils";import {  lift,  setBlockType,  wrapIn} from "prosemirror-commands";export interface UseMarkdownNodeOptions {  node: string;}export function useMarkdownNode({  node}: UseMarkdownNodeOptions) {  const state = useEditorState();  const isActive = useCallback(    (      attrs?: Record<        string,        string | number      >    ) =>      isNodeActive(state, node, attrs),    [node, state]  );  const set = useEditorEventCallback(    (      view,      attrs?: Record<        string,        string | number      >    ) => {      const type =        view.state.schema.nodes[node];      if (!type) return false;      if (type.isTextblock) {        return setBlockType(          type,          attrs        )(view.state, view.dispatch);      }      return wrapIn(type)(        view.state,        view.dispatch      );    }  );  const toggle = useEditorEventCallback(    (      view,      attrs?: Record<        string,        string | number      >    ) => {      const type =        view.state.schema.nodes[node];      if (!type) return false;      if (isActive(attrs)) {        if (type.isTextblock) {          return setBlockType(            view.state.schema.nodes[              "paragraph"            ]          )(view.state, view.dispatch);        }        return lift(          view.state,          view.dispatch        );      }      return set(attrs);    }  );  return { isActive, set, toggle };}